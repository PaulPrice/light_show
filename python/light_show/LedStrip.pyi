from typing import overload, Union
import numpy as np

from .colors import ColorRGB, ColorRGBRef, ColorHSV

Color = Union[ColorRGB, ColorRGBRef, ColorHSV]

class LedStrip:
    def __init__(self, red: np.ndarray, green: np.ndarray, blue: np.ndarray) -> None: ...
    @property
    def red(self) -> np.ndarray: ...
    @property
    def green(self) -> np.ndarray: ...
    @property
    def blue(self) -> np.ndarray: ...
    @overload
    def __getitem__(self, index: int) -> ColorRGB: ...
    @overload
    def __getitem__(self, index: slice) -> LedStrip: ...
    @overload
    def __setitem__(self, index: int, color: Color) -> None: ...
    @overload
    def __setitem__(self, index: slice, color: LedStrip) -> None: ...
    @overload
    def __setitem__(self, index: np.ndarray, color: LedStrip) -> None: ...
    def get(self, index: int) -> ColorRGB: ...
    @overload
    def set(self, index: int, color: Color) -> None: ...
    @overload
    def set(self, red: int, green: int, blue: int) -> None: ...
    def __len__(self) -> int: ...
    def size(self) -> int: ...
    def isOn(self) -> bool: ...
    @overload
    def fill(self, red: int, green: int, blue: int) -> None: ...
    @overload
    def fill(self, color: Color) -> None: ...
    def clear(self) -> None: ...
    def left(self, num: int, fill: Color) -> None: ...
    def right(self, num: int, fill: Color) -> None: ...
    def brightness(self) -> np.ndarray: ...
    def getHSV(self) -> np.ndarray: ...
    @overload
    def setHSV(self, hsv: np.ndarray) -> None: ...
    @overload
    def setHSV(self, hue: np.ndarray, saturation: np.ndarray, value: np.ndarray) -> None: ...
